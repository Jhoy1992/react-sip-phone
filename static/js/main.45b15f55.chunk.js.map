{"version":3,"sources":["../../src/actions/sipSessions.ts","../../src/util/audio.ts","../../src/actions/device.ts","../../src/util/TonePlayer.ts","../../src/util/ToneManager.ts","../../src/util/sessions.ts","../../src/util/incomingSession.ts","../../src/lib/SipAccount.ts","../../src/actions/sipAccounts.ts","../../src/SipWrapper.tsx","../../src/actions/config.ts","../../src/assets/settings-24px.svg","../../src/assets/mic-24px.svg","../../src/assets/volume_up-24px.svg","../../src/components/Status.tsx","../../src/components/phone/DialButton.tsx","../../src/util/buttons.ts","../../src/components/phone/Dialpad.tsx","../../src/assets/phone_paused-24px.svg","../../src/components/phone/Hold.tsx","../../src/assets/mic_off-24px.svg","../../src/components/phone/Mute.tsx","../../src/assets/arrow_forward-24px.svg","../../src/components/phone/BlindTransfer.tsx","../../src/assets/phone_in_talk-24px.svg","../../src/assets/call_end-24px.svg","../../src/components/phone/AttendedTransfer.tsx","../../src/assets/dialpad-24px.svg","../../src/components/phone/Phone.tsx","../../src/assets/call-24px.svg","../../src/components/phone/Incoming.tsx","../../src/components/PhoneSessions.tsx","../../src/components/Dialstring.tsx","../../node_modules/symbol-observable/es/index.js","../../node_modules/symbol-observable/es/ponyfill.js","../../node_modules/redux/es/redux.js","../../src/reducers/sipSessions.ts","../../src/reducers/index.ts","../../src/reducers/sipAccounts.ts","../../src/reducers/device.ts","../../src/reducers/config.ts","../../src/store/configureStore.ts","../../src/index.tsx","../../dist/settings-24px~HQuidduc.svg","../../dist/mic-24px~xExSpqQP.svg","../../dist/volume_up-24px~qJQJhpOr.svg","../../dist/phone_paused-24px~TWxpQtZf.svg","../../dist/mic_off-24px~bjejwOqd.svg","../../dist/arrow_forward-24px~UJhdZXVe.svg","../../dist/phone_in_talk-24px~DQfZjkDQ.svg","../../dist/call_end-24px~HrwYCAOf.svg","../../dist/dialpad-24px~cidqBzRK.svg","../../dist/call-24px~AGZUevvA.svg","../../dist/assets/ring.mp3","App.js","index.js"],"names":["holdCallRequest","session","SessionState","type","sessionDescriptionHandlerModifiers","payload","id","err","setRemoteAudio","deviceId","phoneStore","state","mediaElement","document","remoteStream","receiver","console","setLocalAudio","sender","audioDeviceId","navigator","audio","stream","audioTrack","cleanupMedia","sessionId","DTMF_MATRIX","1","2","3","A","4","5","6","B","7","8","9","C","0","D","Synth","Tone","FMSynth","TonePlayer","ringtone","ringback","dest","oscillator","envelope","attack","decay","sustain","release","time","stop","toneManager","ToneManager","playRing","this","stopAll","SessionStateHandler","stateChange","setTimeout","getFullNumber","number","fullNumber","IncomingSessionStateHandler","holdAll","onHolds","sessions","Object","incomingSession","SIPAccount","uri","UserAgent","sipCredentials","Error","transportOptions","server","sipConfig","websocket","userAgentOptions","autoStart","autoStop","noAnswerTimeout","logBuiltinEnabled","process","logConfiguration","logLevel","authorizationPassword","userAgentString","hackWssInTransport","sessionDescriptionHandlerFactoryOptions","constraints","video","alwaysAcquireMediaFirst","iceCheckingTimeout","expires","_userAgent","setupDelegate","onInvite","onRefer","stateHandler","setupRegistererListener","RegistererState","makeCall","target","outgoingSession","SipWrapper","componentDidMount","props","initializeSip","account","render","React","actions","setNewAccount","setPhoneConfig","config","setCredentials","password","connect","require","Status","settingsMenu","mapOptions","list","options","value","option","label","handleChangeDevice","inputs","outputs","className","styles","onClick","src","settingsIcon","style","width","soundIcon","placeholder","output","onChange","micIcon","input","setPrimaryInput","setPrimaryOutput","getInputAudioDevices","inputArray","devices","device","getOutputAudioDevices","outputArray","primaryInput","primaryOutput","primaryAudioOutput","DialButton","text","click","letters","opacity","getButtonLetters","Dialpad","topRow","middleRow","bottomRow","x","getButton","key","handleClick","obj","playDTMF","sendDTMF","requestOptions","body","contentDisposition","contentType","content","open","Hold","hold","checkHoldState","onHold","includes","holdIcon","unHoldCallRequest","_session","dispatch","stateChanged","userAgent","Mute","onMute","mute","Promise","reject","pc","resolve","micOffIcon","muteRequest","muteSuccess","muteFail","unMuteRequest","unMuteSuccess","unMuteFail","BlindTransfer","blindTransferCall","blindIcon","blindTransferRequest","blindTransferSuccess","blindTransferFail","AttendedTransfer","attendedTransferSessionPending","attendedTransferSessionReady","attendedTransferCall","attendedTransferClear","connectAttendedTransfer","cancelAttendedTransfer","attendedTransferSession","phoneConfig","disabledButtons","connectIcon","cancelIcon","attendedIcon","attendedTransferRequest","attendedTransferCancel","attendedTransferReady","attendedTransferPending","attendedTransferSuccess","attendedTransferFail","newState","closeSession","Phone","dialpadOpen","transferMenu","ended","transferDialString","attendedTransferStarted","duration","counterStarted","componentDidUpdate","newProps","endCall","callDisconnect","attendedProcess","bool","handleCounter","status","statusMask","minutes","Math","hours","seconds","dh","dm","ds","getDurationDisplay","disabled","endCallIcon","dialpadIcon","transferIcon","e","destination","started","autoPlay","ring","Incoming","handleAccept","handleDecline","declineIcon","acceptIcon","loop","acceptCall","declineCall","PhoneSessions","elements","getIncomingCallReferrals","attendedTransfers","getSessions","PS","incomingCalls","Dialstring","currentDialString","handleDial","checkDialstring","length","onKeyPress","callIcon","sipAccount","result","root","Symbol","observable","ponyfill","self","window","global","module","randomString","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","proto","getPrototypeOf","getUndefinedStateErrorMessage","action","actionType","String","_defineProperty","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","push","apply","filter","sym","getOwnPropertyDescriptor","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","_key","arg","reduce","a","b","reducers","reducerKeys","finalReducers","shapeAssertionError","finalReducerKeys","reducer","undefined","assertReducerShape","hasChanged","nextState","_i","previousStateForKey","nextStateForKey","errorMessage","combineReducers","sipAccounts","sipSessions","acceptedIncoming","declinedIncoming","newIncoming","newSessions","endHold","newHold","audioInput","audioOutput","primaryAudioInput","middleware","persistConfig","storage","whitelist","defaultStore","createStore","preloadedState","enhancer","_ref2","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","index","indexOf","splice","listeners","replaceReducer","nextReducer","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","$$observable","persistReducer","composeWithDevTools","middlewares","store","_dispatch","middlewareAPI","chain","map","applyMiddleware","persistor","persistStore","ReactSipPhone","name","height","containerStyle","loading","exports","urlParams","URLSearchParams","location","search","sipuri","get","App","defaultCountryCode","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.45b15f55.chunk.js","sourcesContent":["import { Session, SessionState } from 'sip.js'\nimport { Dispatch } from 'redux';\n\nexport const NEW_SESSION = 'NEW_SESSION'\nexport const NEW_ATTENDED_TRANSFER = 'NEW_ATTENDED_TRANSFER'\nexport const INCOMING_CALL = 'INCOMING_CALL'\n\nexport const ACCEPT_CALL = 'ACCEPT_CALL'\nexport const DECLINE_CALL = 'DECLINE_CALL'\n\nexport const SIPSESSION_STATECHANGE = 'SIPSESSION_STATECHANGE'\nexport const CLOSE_SESSION = 'CLOSE_SESSION'\n\nexport const SIPSESSION_MAKECALL_REQUEST = 'SIPSESSION_MAKECALL_REQUEST'\nexport const SIPSESSION_MAKECALL_SUCCESS = 'SIPSESSION_MAKECALL_SUCCESS'\nexport const SIPSESSION_MAKECALL_FAIL = 'SIPSESSION_MAKECALL_FAIL'\n\nexport const SIPSESSION_HOLD_REQUEST = 'SIPSESSION_HOLD_REQUEST'\nexport const SIPSESSION_HOLD_SUCCESS = 'SIPSESSION_HOLD_SUCCESS'\nexport const SIPSESSION_HOLD_FAIL = 'SIPSESSION_HOLD_FAIL'\nexport const SIPSESSION_UNHOLD_REQUEST = 'SIPSESSION_UNHOLD_REQUEST'\nexport const SIPSESSION_UNHOLD_SUCCESS = 'SIPSESSION_UNHOLD_SUCCESS'\nexport const SIPSESSION_UNHOLD_FAIL = 'SIPSESSION_UNHOLD_FAIL'\n\nexport const SIPSESSION_MUTE_REQUEST = 'SIPSESSION_MUTE_REQUEST'\nexport const SIPSESSION_MUTE_SUCCESS = 'SIPSESSION_MUTE_SUCCESS'\nexport const SIPSESSION_MUTE_FAIL = 'SIPSESSION_MUTE_FAIL'\nexport const SIPSESSION_UNMUTE_REQUEST = 'SIPSESSION_UNMUTE_REQUEST'\nexport const SIPSESSION_UNMUTE_SUCCESS = 'SIPSESSION_UNMUTE_SUCCESS'\nexport const SIPSESSION_UNMUTE_FAIL = 'SIPSESSION_UNMUTE_FAIL'\n\nexport const SIPSESSION_BLIND_TRANSFER_REQUEST =\n  'SIPSESSION_BLIND_TRANSFER_REQUEST'\nexport const SIPSESSION_BLIND_TRANSFER_SUCCESS =\n  'SIPSESSION_BLIND_TRANSFER_SUCCESS'\nexport const SIPSESSION_BLIND_TRANSFER_FAIL = 'SIPSESSION_BLIND_TRANSFER_FAIL'\n\nexport const SIPSESSION_ATTENDED_TRANSFER_REQUEST =\n  'SIPSESSION_ATTENDED_TRANSFER_REQUEST'\nexport const SIPSESSION_ATTENDED_TRANSFER_PENDING =\n  'SIPSESSION_ATTENDED_TRANSFER_PENDING'\nexport const SIPSESSION_ATTENDED_TRANSFER_READY =\n  'SIPSESSION_ATTENDED_TRANSFER_READY'\nexport const SIPSESSION_ATTENDED_TRANSFER_CANCEL =\n  'SIPSESSION_ATTENDED_TRANSFER_CANCEL'\nexport const SIPSESSION_ATTENDED_TRANSFER_FAIL =\n  'SIPSESSION_ATTENDED_TRANSFER_FAIL'\nexport const SIPSESSION_ATTENDED_TRANSFER_SUCCESS =\n  'SIPSESSION_ATTENDED_TRANSFER_SUCCESS'\n\nexport const stateChange = (newState: SessionState, id: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_STATECHANGE,\n    payload: { state: newState, id }\n  })\n}\n\nexport const closeSession = (id: string) => (dispatch: Dispatch) => {\n  dispatch({\n    type: CLOSE_SESSION,\n    payload: id\n  })\n}\n\nexport const acceptCall = (session: Session) => {\n  return { type: ACCEPT_CALL, payload: session }\n}\n\nexport const declineCall = (session: Session) => {\n  return { type: DECLINE_CALL, payload: session }\n}\n\nexport const endCall = (sessionId: string) => {\n  return { type: CLOSE_SESSION, payload: sessionId }\n}\n\nexport const holdCallRequest = (session: Session) => {\n  if (\n    !session.sessionDescriptionHandler ||\n    session.state !== SessionState.Established\n  ) {\n    return { type: SIPSESSION_HOLD_FAIL }\n  }\n  try {\n    session.invite({\n      sessionDescriptionHandlerModifiers: [\n        session.sessionDescriptionHandler!.holdModifier\n      ]\n    })\n    return { type: SIPSESSION_HOLD_REQUEST, payload: session.id }\n  } catch (err) {\n    return { type: SIPSESSION_HOLD_FAIL }\n  }\n}\n\n//maps thru onHold and sessions arrays looking for a call to put on hold before unHolding a call \nexport const unHoldCallRequest = (_session: Session, onHolds: Array<any>, sessions: Array<any>) => (dispatch: Dispatch) => {\n\n  //checks for sessions that exist but are not on hold\n  for (let [sessionId, session] of Object.entries(sessions)) {\n    if (\n      sessionId in onHolds === false &&\n      sessionId !== _session.id\n    ) {\n\n      // hold session if not on hold\n      try {\n        session.invite({\n          sessionDescriptionHandlerModifiers: [\n            session.sessionDescriptionHandler!.holdModifier\n          ]\n        })\n        dispatch({ type: SIPSESSION_HOLD_REQUEST, payload: session.id })\n      } catch (err) {\n        dispatch({ type: SIPSESSION_HOLD_FAIL })\n      }\n\n    }\n  }\n  // unhold original call \n  try {\n    _session.invite()\n    dispatch({ type: SIPSESSION_UNHOLD_REQUEST, payload: _session.id })\n  } catch (err) {\n    dispatch({ type: SIPSESSION_UNHOLD_FAIL })\n  }\n  return;\n}\n\nexport const blindTransferRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_REQUEST\n  })\n}\n\nexport const blindTransferSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_SUCCESS\n  })\n}\n\nexport const blindTransferFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_BLIND_TRANSFER_FAIL\n  })\n}\n\nexport const attendedTransferRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_REQUEST,\n  })\n}\n\nexport const attendedTransferCancel = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_CANCEL\n  })\n}\n\nexport const attendedTransferReady = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_READY\n  })\n}\n\nexport const attendedTransferPending = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_PENDING\n  })\n}\n\nexport const attendedTransferSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_SUCCESS\n  })\n}\nexport const attendedTransferFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_ATTENDED_TRANSFER_FAIL,\n  })\n}\n\nexport const muteRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_REQUEST\n  })\n}\n\nexport const muteSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_SUCCESS\n  })\n}\n\nexport const muteFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_MUTE_FAIL\n  })\n}\n\nexport const unMuteRequest = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_REQUEST\n  })\n}\n\nexport const unMuteSuccess = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_SUCCESS\n  })\n}\n\nexport const unMuteFail = () => (dispatch: Dispatch) => {\n  dispatch({\n    type: SIPSESSION_UNMUTE_FAIL\n  })\n}\n\n","import { phoneStore } from '../index'\nimport { Session } from 'sip.js'\n\nimport {\n  REMOTE_AUDIO_CONNECTED,\n  LOCAL_AUDIO_CONNECTED\n} from '../actions/device'\n\n//adds track from getReceiver stream to <audio id={sessionId}> in Phone.tsx\nexport const setRemoteAudio = (session: Session) => {\n  const state = phoneStore.getState()\n  //@ts-ignore\n  const deviceId = state.device.primaryAudioOutput\n  const mediaElement = document.getElementById(session.id)\n  const remoteStream = new MediaStream()\n  //@ts-ignore\n  session.sessionDescriptionHandler.peerConnection\n    .getReceivers()\n    .forEach((receiver: any) => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track)\n      }\n    })\n  if (mediaElement) {\n    // @ts-ignore\n    mediaElement.setSinkId(\n      // audio output device_id\n      deviceId\n    )\n      .then(() => {\n        // @ts-ignore\n        mediaElement.srcObject = remoteStream\n        //@ts-ignore\n        mediaElement.play()\n      })\n  } else {\n    console.log('no media Element')\n  }\n  phoneStore.dispatch({\n    type: REMOTE_AUDIO_CONNECTED\n  })\n}\n\n//creates new audio track then replaces audio track in getSender stream w/ new track\nexport const setLocalAudio = (session: Session) => {\n  const state = phoneStore.getState()\n  //@ts-ignore\n  const deviceId = state.device.primaryAudioInput\n  // @ts-ignore\n  session.sessionDescriptionHandler.peerConnection\n    .getSenders()\n    .forEach(function (sender: any) {\n      console.log(sender)\n\n      if (sender.track && sender.track.kind === 'audio') {\n        let audioDeviceId =\n          // audio input device_id\n          // 'default'\n          deviceId\n        navigator.mediaDevices\n          // @ts-ignore\n\n          //creates a stream w track\n          .getUserMedia({ audio: { deviceId: audioDeviceId } })\n          .then(function (stream) {\n            let audioTrack = stream.getAudioTracks()\n            sender.replaceTrack(audioTrack[0])\n          })\n      }\n    })\n  phoneStore.dispatch({\n    type: LOCAL_AUDIO_CONNECTED\n  })\n}\n\nexport const cleanupMedia = (sessionId: string) => {\n  const mediaElement = document.getElementById(sessionId)\n  if (mediaElement) {\n    // @ts-ignore\n    mediaElement.srcObject = null\n    // @ts-ignore\n    mediaElement.pause()\n  }\n}\n","\nexport const AUDIO_INPUT_DEVICES_DETECTED = 'AUDIO_INPUT_DEVICES_DETECTED'\nexport const AUDIO_OUTPUT_DEVICES_DETECTED = 'AUDIO_OUTPUT_DEVICES_DETECTED'\nexport const REMOTE_AUDIO_CONNECTED = 'REMOTE_AUDIO_CONNECTED'\nexport const LOCAL_AUDIO_CONNECTED = 'LOCAL_AUDIO_CONNECTED'\nexport const SET_PRIMARY_OUTPUT = 'SET_PRIMARY_OUTPUT'\nexport const SET_PRIMARY_INPUT = 'SET_PRIMARY_INPUT'\n\n\nexport const getInputAudioDevices = () => {\n  let inputArray: Array<Object> = []\n  navigator.mediaDevices\n    .enumerateDevices()\n    .then(function (devices: Array<Object>) {\n      devices.forEach(function (device: any) {\n        if (device.kind === 'audioinput') {\n          inputArray.push(device)\n        }\n      })\n    })\n  return {\n    type: AUDIO_INPUT_DEVICES_DETECTED,\n    payload: inputArray\n  }\n}\n\nexport const getOutputAudioDevices = () => {\n  let outputArray: Array<Object> = []\n  navigator.mediaDevices\n    .enumerateDevices()\n    .then(function (devices: Array<Object>) {\n      devices.forEach(function (device: any) {\n        if (device.kind === 'audiooutput') {\n          outputArray.push(device)\n        }\n      })\n    })\n  return {\n    type: AUDIO_OUTPUT_DEVICES_DETECTED,\n    payload: outputArray\n  }\n}\n\nexport const setPrimaryOutput = (id: string) => {\n  // TODO other stuff for changing the device\n  return {\n    type: SET_PRIMARY_OUTPUT,\n    payload: id\n  }\n}\n\nexport const setPrimaryInput = (id: string) => {\n  // TODO other stuff for changing the device\n  return {\n    type: SET_PRIMARY_INPUT,\n    payload: id\n  }\n}\n\n\n\n\n","//@ts-ignore\nimport Tone from 'tone'\n\nconst DTMF_MATRIX = {\n  1: [697, 1209],\n  2: [697, 1336],\n  3: [697, 1477],\n  A: [697, 1633],\n  4: [770, 1209],\n  5: [770, 1336],\n  6: [770, 1477],\n  B: [770, 1633],\n  7: [852, 1209],\n  8: [852, 1336],\n  9: [852, 1477],\n  C: [852, 1633],\n  0: [941, 1209],\n  '*': [941, 1336],\n  '#': [941, 1477],\n  D: [941, 1633]\n}\n\nconst Synth = Tone.PolySynth && new Tone.PolySynth(2, Tone.Synth)\nconst FMSynth = Tone.PolySynth && new Tone.PolySynth(2, Tone.FMSynth)\n\nexport const playDTMF = (key: any, deviceId: string) => {\n  let obj = DTMF_MATRIX[key]\n  if (!obj) {\n    console.log('invalid DTMF tone input')\n  }\n  Synth.volume.value = -22\n  Synth.set({\n    oscillator: {\n      type: 'sine'\n    },\n    envelope: {\n      attack: 0.02,\n      decay: 0.1,\n      sustain: 0.2,\n      release: 0.02\n    }\n  })\n\n  if (deviceId !== 'default') {\n    const mediaElement = document.getElementById('tone')\n\n\n    if (mediaElement) {\n      let dest = Tone.context.createMediaStreamDestination()\n      Synth.connect(dest)\n      // @ts-ignore\n      mediaElement.setSinkId(\n        // audio output device_id\n        deviceId\n      ).then(() => {\n        // @ts-ignore\n        mediaElement.srcObject = dest.stream\n        //@ts-ignore\n\n        mediaElement.play()\n      })\n\n\n    }\n  } else {\n    Synth.toMaster()\n  }\n\n  Synth.triggerAttackRelease(obj, 0.3)\n}\n\nexport const callDisconnect = (deviceId: string) => {\n  FMSynth.triggerAttack(['C4', 'E4'], '+0.1')\n  FMSynth.triggerRelease(['C4', 'E4'], '+0.14')\n  FMSynth.triggerAttack(['D4', 'G4'], '+0.14')\n  FMSynth.triggerRelease(['D4', 'G4'], '+0.18')\n  if (deviceId !== 'default') {\n    const mediaElement = document.getElementById('tone')\n\n\n    if (mediaElement) {\n      let dest = Tone.context.createMediaStreamDestination()\n      Synth.connect(dest)\n      // @ts-ignore\n      mediaElement.setSinkId(\n        // audio output device_id\n        deviceId\n      ).then(() => {\n        // @ts-ignore\n        mediaElement.srcObject = dest.stream\n        //@ts-ignore\n\n        mediaElement.play()\n      })\n\n\n    }\n\n  }\n  else {\n    FMSynth.toMaster()\n  }\n}\n\nclass TonePlayer {\n  private loop: any\n\n\n  //get audio element, set srcObj to device, and play the track\n  ringtone = (deviceId: string) => {\n    // console.log(deviceId)\n    // const ring = require('./assets/ring.mp3')\n\n    // const ringtone = new Audio(ring);\n    // ringtone.addEventListener('loadeddata', () => {\n    //   ringtone.play()\n    //   // The duration variable now holds the duration (in seconds) of the audio clip \n    // })\n\n    const mediaElement = document.getElementById('ringtone')\n    if (deviceId !== 'default') {\n      if (mediaElement) {\n\n        // @ts-ignore\n        mediaElement.setSinkId(\n          // audio output device_id\n          // 'default'\n          deviceId\n        ).then(() => {\n          // @ts-ignore\n          mediaElement.play()\n        })\n      } else {\n        console.log('no media Element')\n      }\n    } else {\n      // @ts-ignore\n      mediaElement.play()\n    }\n\n\n\n  }\n\n  ringback = (deviceId: string) => {\n    let dest = Tone.context.createMediaStreamDestination()\n    console.log(dest)\n    Synth.set({\n      oscillator: {\n        type: 'sine'\n      },\n      envelope: {\n        attack: 0.02,\n        decay: 0.1,\n        sustain: 0.2,\n        release: 0.02\n      }\n    }).connect(dest)\n    if (deviceId !== 'default') {\n      const mediaElement = document.getElementById('tone')\n\n\n      if (mediaElement) {\n        let dest = Tone.context.createMediaStreamDestination()\n        Synth.connect(dest)\n        // @ts-ignore\n        mediaElement.setSinkId(\n          // audio output device_id\n          deviceId\n        ).then(() => {\n          // @ts-ignore\n          mediaElement.srcObject = dest.stream\n          //@ts-ignore\n\n          mediaElement.play()\n        })\n      }\n\n    } else {\n      Synth.toMaster()\n    }\n\n    this.loop = new Tone.Loop((time: any) => {\n      Synth.triggerAttack([440, 480])\n      Synth.triggerRelease([440, 480], time + 2)\n    }, 6)\n    this.loop.start(0)\n    Tone.Transport.start()\n  }\n\n  stop = () => {\n    try {\n      this.loop.stop(0)\n      Tone.Transport.stop()\n      Synth.triggerRelease([440, 480])\n    } catch{\n      const mediaElement = document.getElementById('ringtone')\n      //@ts-ignore\n      mediaElement.pause()\n\n    }\n  }\n}\n\nexport default TonePlayer\n","import TonePlayer from './TonePlayer'\nimport { phoneStore } from '../index'\n\nclass ToneManager {\n  currentTone: any\n  constructor() { }\n\n  public playRing(type: string) {\n    const state = phoneStore.getState()\n    //@ts-ignore\n    const deviceId = state.device.primaryAudioOutput\n    if (this.currentTone) {\n      this.currentTone.stop()\n      this.currentTone = undefined\n    }\n    if (type === 'ringback') {\n      this.currentTone = new TonePlayer()\n      this.currentTone.ringback(deviceId)\n    } else if (type == 'ringtone') {\n      this.currentTone = new TonePlayer()\n      this.currentTone.ringtone(deviceId)\n    }\n  }\n\n  public stopAll() {\n    if (this.currentTone) {\n      this.currentTone.stop()\n      this.currentTone = undefined\n    }\n  }\n}\n\nconst toneManager = new ToneManager()\nexport default toneManager\n","import { phoneStore } from '../index'\nimport { SessionState, Session } from 'sip.js'\nimport { SIPSESSION_STATECHANGE, CLOSE_SESSION } from '../actions/sipSessions'\n\nimport { setLocalAudio, setRemoteAudio, cleanupMedia } from './audio'\nimport toneManager from './ToneManager'\nexport class SessionStateHandler {\n  private session: Session\n  constructor(session: Session) {\n    this.session = session\n  }\n\n  public stateChange = (newState: SessionState) => {\n    switch (newState) {\n      case SessionState.Establishing:\n        toneManager.playRing('ringback')\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        break\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        toneManager.stopAll()\n        setLocalAudio(this.session)\n        setRemoteAudio(this.session)\n        break\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        toneManager.stopAll()\n        cleanupMedia(this.session.id)\n        break\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        toneManager.stopAll()\n        setTimeout(() => {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: this.session.id\n          })\n        }, 5000)\n        break\n      default:\n        console.log(`Unknown session state change: ${newState}`)\n        break\n    }\n  }\n}\n\nexport const getFullNumber = (number: string) => {\n  if (number.length < 10) {\n    return number\n  }\n  // @ts-ignore\n  let fullNumber = `+${phoneStore.getState().sipAccounts.sipAccount._config.defaultCountryCode}${number}`\n  if (number.includes('+') && number.length === 10) {\n    fullNumber = `${number}`\n  }\n  console.log(fullNumber)\n  return fullNumber\n}\n\nexport const statusMask = (status: string) => {\n  switch (status) {\n    case 'Established':\n      return 'Connected'\n    case 'Establishing':\n      return 'Calling...'\n    case 'Initial':\n      return 'Initial'\n    case 'Terminating':\n    case 'Terminated':\n      return 'Ended'\n    default:\n      return 'Unknown Status'\n  }\n}\n\nexport const getDurationDisplay = (duration: number) => {\n  let minutes = Math.floor(duration / 60)\n  let hours = Math.floor(minutes / 60)\n  minutes = minutes % 60\n  let seconds = duration % 60\n  let dh, dm, ds\n  if (hours && hours < 10) {\n    dh = `0${hours}:`\n  } else if (hours) {\n    dh = `${hours}:`\n  } else {\n    dh = '00:'\n  }\n  if (minutes && minutes < 10) {\n    dm = `0${minutes}:`\n  } else if (minutes) {\n    dm = `${minutes}:`\n  } else {\n    dm = '00:'\n  }\n  if (seconds && seconds < 10) {\n    ds = `0${seconds}`\n  } else if (seconds) {\n    ds = `${seconds}`\n  } else {\n    ds = '00'\n  }\n  return `${hours ? dh : ''}${dm}${ds}`\n}\n","import { phoneStore } from '../index'\nimport { SessionState, Session } from 'sip.js'\nimport {\n  SIPSESSION_STATECHANGE,\n  CLOSE_SESSION,\n  SIPSESSION_HOLD_REQUEST,\n  holdCallRequest\n} from '../actions/sipSessions'\nimport { setLocalAudio, setRemoteAudio, cleanupMedia } from './audio'\n\nexport class IncomingSessionStateHandler {\n  private incomingSession: Session\n  constructor(incomingSession: Session) {\n    this.incomingSession = incomingSession\n  }\n\n  public stateChange = (newState: SessionState) => {\n    switch (newState) {\n      case SessionState.Establishing:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        break\n      case SessionState.Established:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        this.holdAll()\n        setLocalAudio(this.incomingSession)\n        setRemoteAudio(this.incomingSession)\n        break\n      case SessionState.Terminating:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        cleanupMedia(this.incomingSession.id)\n        break\n      case SessionState.Terminated:\n        phoneStore.dispatch({\n          type: SIPSESSION_STATECHANGE\n        })\n        setTimeout(() => {\n          phoneStore.dispatch({\n            type: CLOSE_SESSION,\n            payload: this.incomingSession.id\n          })\n        }, 5000)\n        break\n      default:\n        console.log(`Unknown session state change: ${newState}`)\n        break\n    }\n  }\n\n  public holdAll() {\n    const state = phoneStore.getState()\n    //@ts-ignore\n    const onHolds = state.sipSessions.onHold\n    //@ts-ignore\n    const sessions = state.sipSessions.sessions\n    for (let [sessionId, session] of Object.entries(sessions)) {\n      if (\n        sessionId in onHolds === false &&\n        sessionId !== this.incomingSession.id\n      ) {\n        try {\n          //@ts-ignore\n          holdCallRequest(session)\n          //dispatch here because class is not connected to redux actions\n          phoneStore.dispatch({\n            type: SIPSESSION_HOLD_REQUEST,\n            //@ts-ignore\n            payload: session.id\n          })\n          return\n        } catch (err) {\n          return\n        }\n      }\n    }\n  }\n}\n","import {\n  Inviter,\n  Invitation,\n  Referral,\n  Registerer,\n  RegistererState,\n  RegistererOptions,\n  Session,\n  UserAgent,\n  UserAgentOptions\n} from 'sip.js'\nimport { TransportOptions } from 'sip.js/lib/platform/web'\nimport { phoneStore } from '../index'\nimport { NEW_USERAGENT } from '../actions/sipAccounts'\nimport { SessionStateHandler, getFullNumber } from '../util/sessions'\nimport { IncomingSessionStateHandler } from '../util/incomingSession'\n\nimport { NEW_SESSION, INCOMING_CALL } from '../actions/sipSessions'\nimport { SipConfig, SipCredentials } from '../models'\n\nexport default class SIPAccount {\n  public _config: SipConfig\n  public _credentials: SipCredentials\n  public _userAgent: any\n  public _registerer: any\n\n  constructor(sipConfig: SipConfig, sipCredentials: SipCredentials) {\n    this._config = sipConfig\n    this._credentials = sipCredentials\n    const uri = UserAgent.makeURI('sip:' + sipCredentials.sipuri)\n    if (!uri) {\n      throw new Error('Failed to create URI')\n    }\n    const transportOptions: TransportOptions = {\n      server: sipConfig.websocket\n    }\n    const userAgentOptions: UserAgentOptions = {\n      autoStart: false,\n      autoStop: true,\n      noAnswerTimeout: sipConfig.noAnswerTimeout || 30,\n      logBuiltinEnabled: process.env.NODE_ENV !== 'production',\n      logConfiguration: process.env.NODE_ENV !== 'production',\n      logLevel: process.env.NODE_ENV !== 'production' ? 'debug' : 'error',\n      authorizationPassword: sipCredentials.password,\n      userAgentString: 'OTF-react-sip-phone',\n      hackWssInTransport: true,\n      transportOptions,\n      uri,\n      sessionDescriptionHandlerFactoryOptions: {\n        constraints: {\n          audio: {\n            deviceId:\n              'default'\n          },\n          video: false\n        },\n        alwaysAcquireMediaFirst: true,\n        iceCheckingTimeout: 500\n      }\n    }\n    const registererOptions: RegistererOptions = {\n      expires: 300,\n      logConfiguration: process.env.NODE_ENV !== 'production'\n    }\n\n    //check here for register\n    this._userAgent = new UserAgent(userAgentOptions)\n    this._registerer = new Registerer(this._userAgent, registererOptions)\n    this.setupDelegate() // Delegate is what handles incoming calls\n    this._userAgent.start().then(() => {\n      this._registerer.register()\n      this.setupRegistererListener()\n      // Push ua to store\n      phoneStore.dispatch({ type: NEW_USERAGENT, payload: this._userAgent })\n    })\n  }\n\n  setupDelegate() {\n    this._userAgent.delegate = {\n      onInvite(invitation: Invitation): void {\n        // An Invitation is a Session\n        const incomingSession: Session = invitation\n\n        // Setup incoming session delegate\n        incomingSession.delegate = {\n          // Handle incoming REFER request.\n          onRefer(referral: Referral): void {\n            console.log(referral)\n          }\n        }\n\n        phoneStore.dispatch({ type: INCOMING_CALL, payload: incomingSession })\n\n        const stateHandler = new IncomingSessionStateHandler(incomingSession)\n        // Handle incoming session state changes.\n        incomingSession.stateChange.addListener(stateHandler.stateChange)\n      }\n    }\n  }\n\n  setupRegistererListener() {\n    this._registerer.stateChange.addListener((newState: RegistererState) => {\n      switch (newState) {\n        case RegistererState.Initial:\n          console.log('The user registration has initialized  ')\n          break\n        case RegistererState.Registered:\n          console.log('The user is registered ')\n          break\n        case RegistererState.Unregistered:\n          console.log('The user is unregistered ')\n          break\n        case RegistererState.Terminated:\n          console.log('The user is terminated ')\n          break\n      }\n    })\n  }\n\n  makeCall(number: string) {\n\n    // Make a call\n    const target = UserAgent.makeURI(\n      `sip:${getFullNumber(number)}@sip.reper.io;user=phone`\n    )\n    if (target) {\n      console.log(`Calling ${number}`)\n      const inviter = new Inviter(this._userAgent, target)\n      // An Inviter is a Session\n      const outgoingSession: Session = inviter\n      // Setup outgoing session delegate\n      outgoingSession.delegate = {\n        // Handle incoming REFER request.\n        onRefer(referral: Referral): void {\n          // TODO\n          console.log('Referred: ' + referral)\n        }\n      }\n      phoneStore.dispatch({ type: NEW_SESSION, payload: outgoingSession })\n      // Handle outgoing session state changes.\n      const stateHandler = new SessionStateHandler(outgoingSession)\n      outgoingSession.stateChange.addListener(stateHandler.stateChange)\n      outgoingSession\n        .invite()\n        .then(() => {\n          console.log('Invite sent!')\n        })\n        .catch((error: Error) => {\n          console.log(error)\n        })\n    } else {\n      console.log(`Failed to establish session for outgoing call to ${number}`)\n    }\n    // toneManager.playRing('ringback')\n\n  }\n}\n","import SIPAccount from \"../lib/SipAccount\"\n\nexport const SIPACCOUNT_UNREGISTERED = 'SIPACCOUNT_UNREGISTERED'\nexport const NEW_USERAGENT = 'NEW_USERAGENT'\nexport const NEW_ACCOUNT = 'NEW_ACCOUNT'\n\nexport const setNewAccount = (account: SIPAccount) => {\n  return { type: NEW_ACCOUNT, payload: account }\n}","import * as React from 'react'\nimport { SipConfig, SipCredentials, PhoneConfig } from './models'\nimport SIPAccount from './lib/SipAccount'\nimport { connect } from 'react-redux'\nimport { setNewAccount } from './actions/sipAccounts'\nimport { setPhoneConfig, setCredentials } from  './actions/config'\n\n// Wrapper component to do any initialization of the Sip connection.\n\ninterface Props {\n  sipCredentials: SipCredentials\n  sipConfig: SipConfig\n  phoneConfig: PhoneConfig\n  setNewAccount: Function\n  setPhoneConfig: Function\n  setCredentials: Function\n  children: any\n}\n\nclass SipWrapper extends React.Component<Props> {\n\n  componentDidMount() {\n    console.log('mounted')\n    if (this.props.sipCredentials.password) {\n      this.initializeSip()\n    }\n  }\n\n  initializeSip() {\n    const account = new SIPAccount(this.props.sipConfig, this.props.sipCredentials)\n    this.props.setNewAccount(account)\n  }\n\n  render() {\n    return <React.Fragment>\n      { this.props.children }\n    </React.Fragment>\n  }\n}\nconst mapStateToProps = () => ({})\nconst actions = {\n  setNewAccount,\n  setPhoneConfig,\n  setCredentials\n}\nexport default connect(mapStateToProps, actions)(SipWrapper)","import { PhoneConfig } from '../models'\n\nexport const SET_CREDENTIALS = 'SET_CREDENTIALS'\nexport const SET_CONFIG = 'SET_CONFIG'\n\nexport const setCredentials = (uri: string = '', password: string = '') => {\n  return { type: SET_CREDENTIALS, payload: {uri, password} }\n}\n\nexport const setPhoneConfig = (config: PhoneConfig) => {\n  return { type: SET_CONFIG, payload: config}\n}","/* loaded by smart-asset */\nexport default require(\"./settings-24px~HQuidduc.svg\")","/* loaded by smart-asset */\nexport default require(\"./mic-24px~xExSpqQP.svg\")","/* loaded by smart-asset */\nexport default require(\"./volume_up-24px~qJQJhpOr.svg\")","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { setPrimaryInput, setPrimaryOutput, getInputAudioDevices, getOutputAudioDevices } from '../actions/device'\nimport styles from './Status.scss'\nimport Select from 'react-select';\nimport settingsIcon from '../assets/settings-24px.svg'\nimport micIcon from '../assets/mic-24px.svg'\nimport soundIcon from '../assets/volume_up-24px.svg'\n\ninterface Props {\n  name: string\n  inputs: any\n  outputs: any\n  primaryInput: string\n  primaryOutput: string\n  setPrimaryInput: Function\n  setPrimaryOutput: Function\n  getInputAudioDevices: Function\n  getOutputAudioDevices: Function\n}\n\nclass Status extends React.Component<Props> {\n  state = { settingsMenu: false }\n\n  componentDidMount() {\n    this.props.getInputAudioDevices()\n    this.props.getOutputAudioDevices()\n  }\n  mapOptions(options: any) {\n    const list: any = []\n    options.map((option: any) => {\n      list.push({ value: option.deviceId, label: option.label })\n    })\n    return list\n  }\n  handleChangeDevice(type: string, id: string) {\n    if (type === 'out') {\n      this.props.setPrimaryOutput(id)\n    } else {\n      this.props.setPrimaryInput(id)\n    }\n  }\n  render() {\n    const { props, state } = this\n    const inputs = this.mapOptions(props.inputs)\n    const outputs = this.mapOptions(props.outputs)\n    return (\n      <React.Fragment>\n        <div className={styles.container}>\n          <div className={styles.userString} >{props.name}</div>\n          <div\n            id={styles.settingsButton}\n            className={state.settingsMenu ? styles.on : ''}\n            onClick={() => this.setState({ settingsMenu: !state.settingsMenu })}\n          >\n            <img src={settingsIcon} />\n          </div>\n        </div>\n        <div\n          id={styles.settingsMenu}\n          className={state.settingsMenu ? '' : styles.closed}\n        >\n          <hr style={{ width: '100%' }} />\n          <div className={styles.dropdownRow}>\n            <img className={styles.dropdownIcon} src={soundIcon} />\n            <Select\n              placeholder=\"Select Output...\"\n              value={outputs.find((output: any) => output.value === props.primaryOutput) || null}\n              onChange={option => this.handleChangeDevice('out', option.value)}\n              options={outputs}\n              id={styles.dropdowns}\n            />\n          </div>\n          <div className={styles.dropdownRow}>\n            <img className={styles.dropdownIcon} src={micIcon} />\n            <Select\n              placeholder=\"Select Input...\"\n              value={inputs.find((input: any) => input.value === props.primaryInput)}\n              onChange={option => this.handleChangeDevice('in', option.value)}\n              options={inputs}\n              id={styles.dropdowns}\n            />\n          </div>\n          <hr style={{ width: '100%' }} />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nconst mapStateToProps = (state: any) => ({\n  inputs: state.device.audioInput,\n  outputs: state.device.audioOutput,\n  primaryInput: state.device.primaryAudioInput,\n  primaryOutput: state.device.primaryAudioOutput\n})\n\nconst actions = {\n  setPrimaryInput,\n  setPrimaryOutput,\n  getInputAudioDevices,\n  getOutputAudioDevices\n}\nexport default connect(mapStateToProps, actions)(Status)","import * as React from 'react'\nimport styles from './Phone.scss'\n\ninterface Props {\n  text: string,\n  click: Function,\n  letters: string,\n}\n\nconst DialButton = ({ text, click, letters }: Props) => {\n  return <div id=\"sip-dial-button\"\n    className={styles.dialpadButton}\n    onClick={() => click()}>\n    {text}\n    <div style={{opacity: letters === '1' ? 0 : 1}} className={styles.dialpadButtonLetters}>\n      {letters}\n    </div>\n  </div>\n}\n\nexport default DialButton","export const getButtonLetters = (value: string) => {\n  switch (value) {\n    case '1':\n      return '1'\n    case '2':\n      return 'ABC'\n    case '3':\n      return 'DEF'\n    case '4':\n      return 'GHI'\n    case '5':\n      return 'JKL'\n    case '6':\n      return 'MNO'\n    case '7':\n      return 'PQRS'\n    case '8':\n      return 'TUV'\n    case '9':\n      return 'WXYZ'\n    case '0':\n      return '+'\n    default:\n      return ''\n  }\n}","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport styles from './Phone.scss'\nimport DialButton from './DialButton'\nimport { Session, SessionState } from 'sip.js'\nimport { getButtonLetters } from '../../util/buttons'\nimport { playDTMF } from '../../util/TonePlayer'\ninterface Props {\n  open: boolean\n  session: Session\n  deviceId: string\n}\n\nclass Dialpad extends React.Component<Props> {\n  topRow: any = []\n  middleRow: any = []\n  bottomRow: any = []\n\n  constructor(props: Props) {\n    super(props)\n    for (let x = 1; x < 4; x++) {\n      this.topRow.push(this.getButton(x.toString()))\n    }\n    for (let x = 4; x < 7; x++) {\n      this.middleRow.push(this.getButton(x.toString()))\n    }\n    for (let x = 7; x < 10; x++) {\n      this.bottomRow.push(this.getButton(x.toString()))\n    }\n  }\n\n  getButton(value: string) {\n    return (\n      <DialButton\n        key={value}\n        text={value}\n        letters={getButtonLetters(value)}\n        click={() => this.handleClick(value)}\n      />\n    )\n  }\n\n  handleClick(value: string) {\n    if (this.props.session.state === SessionState.Established) {\n      this.sendDTMF(value)\n      playDTMF(value, this.props.deviceId)\n    }\n  }\n\n  sendDTMF(value: string) {\n    const options = {\n      requestOptions: {\n        body: {\n          contentDisposition: 'render',\n          contentType: 'application/dtmf-relay',\n          content: `Signal=${value}\\r\\nDuration=1000`\n        }\n      }\n    }\n    this.props.session.info(options)\n  }\n\n  render() {\n    return (\n      <div className={this.props.open ? '' : styles.closed} id={styles.dialpad}>\n        <div className={styles.dialpadRow}>{this.topRow}</div>\n        <div className={styles.dialpadRow}>{this.middleRow}</div>\n        <div className={styles.dialpadRow}>{this.bottomRow}</div>\n        <div className={styles.dialpadRow}>\n          {this.getButton('*')}\n          {this.getButton('0')}\n          {this.getButton('#')}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  deviceId: state.device.primaryAudioOutput\n})\nconst actions = {\n\n}\nexport default connect(mapStateToProps, actions)(Dialpad)\n","/* loaded by smart-asset */\nexport default require(\"./phone_paused-24px~TWxpQtZf.svg\")","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport styles from './Phone.scss'\nimport { Session, UserAgent } from 'sip.js'\n\nimport holdIcon from '../../assets/phone_paused-24px.svg'\n\nimport { holdCallRequest, unHoldCallRequest } from '../../actions/sipSessions'\n\ninterface Props {\n  session: Session\n  userAgent: UserAgent\n  holdCallRequest: Function\n  unHoldCallRequest: Function\n  onHold: Array<Object>\n  sessions: Array<Object>\n}\n\nclass Hold extends React.Component<Props> {\n  hold() {\n    if (this.checkHoldState()) {\n      this.props.unHoldCallRequest(this.props.session, this.props.onHold, this.props.sessions)\n    } else {\n      this.props.holdCallRequest(this.props.session)\n    }\n    return\n  }\n\n  checkHoldState() {\n    return this.props.onHold.includes(this.props.session.id)\n  }\n\n  render() {\n    return (\n      <button className={this.checkHoldState() ? styles.on : ''} id={styles.actionButton} onClick={() => this.hold()}>\n        <img src={holdIcon} />\n      </button>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n  sessions: state.sipSessions.sessions,\n  userAgent: state.sipAccounts.userAgent,\n  onHold: state.sipSessions.onHold\n})\nconst actions = {\n  holdCallRequest,\n  unHoldCallRequest\n}\n\nexport default connect(mapStateToProps, actions)(Hold)\n","/* loaded by smart-asset */\nexport default require(\"./mic_off-24px~bjejwOqd.svg\")","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport styles from './Phone.scss'\nimport { Session, SessionState, UserAgent } from 'sip.js'\n\nimport micOffIcon from '../../assets/mic_off-24px.svg'\n\nimport {\n  muteRequest,\n  muteSuccess,\n  muteFail,\n  unMuteRequest,\n  unMuteSuccess,\n  unMuteFail\n} from '../../actions/sipSessions'\n\ninterface Props {\n  session: Session\n  userAgent: UserAgent\n  muteRequest: Function\n  muteSuccess: Function\n  muteFail: Function\n  unMuteRequest: Function\n  unMuteSuccess: Function\n  unMuteFail: Function\n}\n\nclass Mute extends React.Component<Props> {\n  state = {\n    onMute: false\n  }\n\n  mute() {\n    if (this.state.onMute) {\n      this.props.unMuteRequest()\n      return new Promise((resolve, reject) => {\n        if (\n          !this.props.session.sessionDescriptionHandler ||\n          this.props.session.state !== SessionState.Established\n        ) {\n          this.props.unMuteFail()\n          reject('No session to mute')\n          return\n        }\n        try {\n          const pc =\n            // @ts-ignore\n            this.props.session.sessionDescriptionHandler!.peerConnection\n          pc.getSenders().forEach(function (stream: any) {\n            if (stream.track && stream.track.kind === 'audio') {\n              stream.track.enabled = true\n            }\n          })\n          this.props.unMuteSuccess()\n          this.setState({ onMute: false })\n          resolve()\n          return\n        } catch (err) {\n          this.props.unMuteFail()\n          reject(err)\n          return\n        }\n      })\n    }\n\n    if (!this.state.onMute) {\n      return new Promise((resolve, reject) => {\n        if (\n          !this.props.session.sessionDescriptionHandler ||\n          this.props.session.state !== SessionState.Established\n        ) {\n          this.props.muteFail()\n          reject('No session to mute')\n          return\n        }\n        try {\n          this.props.muteRequest()\n          const pc =\n            // @ts-ignore\n            this.props.session.sessionDescriptionHandler!.peerConnection\n          console.log(pc.getSenders())\n          pc.getSenders().forEach(function (stream: any) {\n            if (stream.track && stream.track.kind === 'audio') {\n              stream.track.enabled = false\n            }\n          })\n          this.props.muteSuccess()\n          this.setState({ onMute: true })\n          resolve()\n          return\n        } catch (err) {\n          this.props.muteFail()\n          reject(err)\n          return\n        }\n      })\n    }\n    this.props.muteFail()\n    return\n  }\n\n  render() {\n    return (\n      <div\n        className={this.state.onMute ? styles.on : ''}\n        id={styles.actionButton} onClick={() => this.mute()}>\n        <img src={micOffIcon} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n  sessions: state.sipSessions.sessions,\n  userAgent: state.sipAccounts.userAgent\n})\nconst actions = {\n  muteRequest,\n  muteSuccess,\n  muteFail,\n  unMuteRequest,\n  unMuteSuccess,\n  unMuteFail\n}\n\nexport default connect(mapStateToProps, actions)(Mute)\n","/* loaded by smart-asset */\nexport default require(\"./arrow_forward-24px~UJhdZXVe.svg\")","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport styles from './Phone.scss'\n\nimport { Session, UserAgent } from 'sip.js'\nimport {\n  blindTransferRequest,\n  blindTransferSuccess,\n  blindTransferFail\n} from '../../actions/sipSessions'\nimport { getFullNumber } from '../../util/sessions'\nimport blindIcon from '../../assets/arrow_forward-24px.svg'\n\ninterface Props {\n  session: Session\n  userAgent: UserAgent\n  destination: string\n  blindTransferRequest: Function\n  blindTransferSuccess: Function\n  blindTransferFail: Function\n}\n\nclass BlindTransfer extends React.Component<Props> {\n  blindTransferCall() {\n    this.props.blindTransferRequest()\n    const target = UserAgent.makeURI(\n      `sip:${getFullNumber(this.props.destination)}@sip.reper.io;user=phone`\n    )\n    if (target) {\n      try {\n        this.props.session.refer(target)\n        this.props.blindTransferSuccess()\n      } catch (err) {\n        console.log(err)\n      }\n    } else {\n      this.props.blindTransferFail()\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className={styles.transferButtons}\n          onClick={() => this.blindTransferCall()}\n        >\n          <img src={blindIcon} />\n        </button>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n  sessions: state.sipSessions.sessions,\n  userAgent: state.sipAccounts.userAgent\n})\nconst actions = {\n  blindTransferRequest,\n  blindTransferSuccess,\n  blindTransferFail\n}\n\nexport default connect(mapStateToProps, actions)(BlindTransfer)\n","/* loaded by smart-asset */\nexport default require(\"./phone_in_talk-24px~DQfZjkDQ.svg\")","/* loaded by smart-asset */\nexport default require(\"./call_end-24px~HrwYCAOf.svg\")","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { phoneStore } from '../../index'\nimport styles from './Phone.scss'\nimport { Session, SessionState, UserAgent, Inviter } from 'sip.js'\nimport {\n  NEW_ATTENDED_TRANSFER,\n  attendedTransferRequest,\n  attendedTransferCancel,\n  attendedTransferReady,\n  attendedTransferPending,\n  attendedTransferSuccess,\n  attendedTransferFail,\n  holdCallRequest,\n  stateChange,\n  closeSession\n} from '../../actions/sipSessions';\nimport Phone from './Phone'\nimport { getFullNumber } from '../../util/sessions'\nimport attendedIcon from '../../assets/phone_in_talk-24px.svg'\nimport cancelIcon from '../../assets/call_end-24px.svg'\nimport connectIcon from '../../assets/arrow_forward-24px.svg'\n\ninterface Props {\n  session: Session\n  userAgent: UserAgent\n  destination: string\n  started: Function\n  attendedTransferRequest: Function\n  attendedTransferCancel: Function\n  attendedTransferReady: Function\n  attendedTransferPending: Function\n  attendedTransferSuccess: Function\n  attendedTransferFail: Function\n  holdCallRequest: Function\n  stateChange: Function\n  closeSession: Function\n}\n\nclass AttendedTransfer extends React.Component<Props> {\n  state = {\n    attendedTransferSessionPending: null,\n    attendedTransferSessionReady: null\n  }\n\n  attendedTransferCall() {\n    this.holdAll()\n    this.props.attendedTransferRequest()\n    const target = UserAgent.makeURI(\n      `sip:${getFullNumber(this.props.destination)}@sip.reper.io;user=phone`\n    )\n    if (target) {\n      const inviter = new Inviter(this.props.userAgent, target)\n      const outgoingSession: Session = inviter\n      phoneStore.dispatch({ type: NEW_ATTENDED_TRANSFER, payload: outgoingSession })\n      this.setState({ attendedTransferSessionPending: outgoingSession })\n\n      outgoingSession.stateChange.addListener((newState: SessionState) => {\n        switch (newState) {\n          case SessionState.Initial:\n          case SessionState.Establishing:\n            this.props.stateChange(newState, outgoingSession.id)\n            //add new session to local state\n            this.props.attendedTransferPending()\n\n            break\n          case SessionState.Established:\n            this.setState({ attendedTransferSessionReady: outgoingSession })\n            this.props.attendedTransferReady()\n\n            this.setState({ attendedTransferSessionPending: false })\n            this.props.stateChange(newState, outgoingSession.id)\n\n            break\n          case SessionState.Terminating:\n            this.props.stateChange(newState, outgoingSession.id)\n            break\n          case SessionState.Terminated:\n            this.props.stateChange(newState, outgoingSession.id)\n            this.attendedTransferClear()\n\n            setTimeout(() => {\n              this.props.closeSession(outgoingSession.id)\n            }, 5000)\n            break\n          default:\n            console.log(`Unknown session state change: ${newState}`)\n            break\n        }\n      })\n      outgoingSession.invite().catch((error: Error) => {\n        this.props.attendedTransferFail()\n        console.log(error)\n      })\n    } else {\n      this.props.attendedTransferFail()\n\n    }\n  }\n\n  attendedTransferClear() {\n    this.setState({ attendedTransferSessionPending: null })\n    this.setState({ attendedTransferSessionReady: null })\n    this.props.started(false)\n  }\n\n  //refers the session in local state\n  connectAttendedTransfer(attendedTransferSession: any) {\n    try {\n      this.props.session.refer(attendedTransferSession)\n      this.props.attendedTransferSuccess()\n\n      this.setState({ attendedTransferSessionReady: null })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  cancelAttendedTransfer(attendedTransferSession: any) {\n    attendedTransferSession.cancel()\n    this.props.attendedTransferCancel()\n\n    this.setState({ attendedTransferSessionPending: null })\n    this.setState({ attendedTransferSession: null })\n  }\n\n  holdAll() {\n    const state = phoneStore.getState()\n\n    //@ts-ignore\n    const onHolds = state.sipSessions.onHold\n\n    //@ts-ignore\n    const sessions = state.sipSessions.sessions\n\n    if (this.props.session.id in onHolds === false) {\n      try {\n        //@ts-ignore\n        this.props.holdCallRequest(this.props.session)\n\n        return\n      } catch (err) {\n        return\n      }\n    }\n  }\n\n  render() {\n    if (this.state.attendedTransferSessionReady) {\n      return (\n        <React.Fragment>{\n          // @ts-ignore\n          <Phone session={this.state.attendedTransferSessionReady} phoneConfig={{ disabledButtons: ['numpad', 'transfer'] }} />\n        }\n          <button\n            className={styles.transferButtons}\n            onClick={() => {\n              this.props.started(false)\n              this.connectAttendedTransfer(this.state.attendedTransferSessionReady)\n            }}>\n            <img src={connectIcon} />\n          </button>\n        </React.Fragment>\n\n      )\n    } else if (this.state.attendedTransferSessionPending) {\n      return (\n        <button\n          className={styles.endCallButton}\n          onClick={() => {\n            this.props.started(false)\n            this.cancelAttendedTransfer(this.state.attendedTransferSessionPending)\n          }}>\n          <img src={cancelIcon} />\n        </button>\n      )\n    } else {\n      return (\n        <button\n          className={styles.transferButtons}\n          onClick={() => {\n            this.props.started(true)\n            this.attendedTransferCall()\n          }}>\n          <img src={attendedIcon} />\n        </button>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n  sessions: state.sipSessions.sessions,\n  userAgent: state.sipAccounts.userAgent\n})\nconst actions = {\n  holdCallRequest,\n  attendedTransferRequest,\n  attendedTransferCancel,\n  attendedTransferReady,\n  attendedTransferPending,\n  attendedTransferSuccess,\n  attendedTransferFail,\n  stateChange,\n  closeSession,\n}\n\nexport default connect(mapStateToProps, actions)(AttendedTransfer)","/* loaded by smart-asset */\nexport default require(\"./dialpad-24px~cidqBzRK.svg\")","import * as React from 'react'\nimport Dialpad from './Dialpad'\nimport { connect } from 'react-redux'\nimport { Session, SessionState, UserAgent } from 'sip.js'\nimport { endCall } from '../../actions/sipSessions'\nimport Hold from './Hold'\nimport Mute from './Mute'\nimport BlindTranfer from './BlindTransfer'\nimport AttendedTransfer from './AttendedTransfer'\nimport styles from './Phone.scss'\nimport endCallIcon from '../../assets/call_end-24px.svg'\nimport dialpadIcon from '../../assets/dialpad-24px.svg'\nimport transferIcon from '../../assets/arrow_forward-24px.svg'\nimport { callDisconnect } from '../../util/TonePlayer'\nimport toneManager from '../../util/ToneManager'\nimport { statusMask, getDurationDisplay } from '../../util/sessions'\nimport { PhoneConfig } from '../../models'\ninterface Props {\n  session: Session\n  userAgent: UserAgent\n  endCall: Function\n  phoneConfig: PhoneConfig\n  deviceId: string\n}\n\nclass Phone extends React.Component<Props> {\n  state = {\n    dialpadOpen: false,\n    transferMenu: false,\n    ended: false,\n    transferDialString: '',\n    attendedTransferStarted: false,\n    duration: 0,\n    counterStarted: false\n  }\n\n  constructor(props: any) {\n    super(props)\n    this.attendedProcess = this.attendedProcess.bind(this);\n  }\n\n  componentDidUpdate(newProps: Props) {\n    if (newProps.session.state === SessionState.Established && !this.state.counterStarted) {\n      this.handleCounter()\n    }\n    if (\n      newProps.session.state === SessionState.Terminated &&\n      this.state.ended === false\n    ) {\n      this.setState({ ended: true })\n    }\n  }\n\n  endCall() {\n    if (this.props.session.state === SessionState.Established) {\n      this.props.session.bye()\n    } else if (\n      this.props.session.state === SessionState.Initial ||\n      this.props.session.state === SessionState.Establishing\n    ) {\n      toneManager.stopAll()\n      callDisconnect(this.props.deviceId)\n      // @ts-ignore\n\n      this.props.session.cancel()\n\n    }\n    this.setState({ ended: true })\n    setTimeout(() => {\n      this.props.session.dispose()\n      this.props.endCall(this.props.session.id)\n    }, 5000)\n  }\n\n  attendedProcess(bool: boolean) {\n    this.setState({ attendedTransferStarted: bool })\n  }\n\n  handleCounter() {\n    if (this.props.session && this.props.session.state !== SessionState.Terminated) {\n      if (this.state.counterStarted === false) {\n        this.setState({ counterStarted: true })\n      }\n      setTimeout(() => {\n        this.setState({ duration: this.state.duration + 1 })\n        this.handleCounter()\n      }, 1000)\n    }\n  }\n\n  render() {\n    const { state, props } = this\n    return (\n      <React.Fragment>\n        <hr style={{ width: '100%' }} />\n        <div>{\n          // @ts-ignore\n          `${props.session.remoteIdentity.uri.normal.user} - ${props.session.remoteIdentity._displayName}`}\n        </div>\n        <br/>\n        <div>{statusMask(props.session.state)}</div>\n        <br/>\n        {(this.props.session.state === SessionState.Initial ||\n          this.props.session.state === SessionState.Establishing) ?\n          null : <div>{getDurationDisplay(this.state.duration)}</div>\n        }\n        {\n          state.ended ? null :\n            <React.Fragment>\n              <Dialpad open={state.dialpadOpen} session={props.session} />\n              <div className={styles.actionsContainer}>\n                {props.phoneConfig.disabledButtons.includes('mute') ? null :\n                  <Mute session={props.session} />}\n                <button\n                  className={styles.endCallButton}\n                  disabled={state.ended}\n                  onClick={() => this.endCall()}\n                >\n                  <img src={endCallIcon} />\n                </button>\n                {props.phoneConfig.disabledButtons.includes('hold') ? null :\n                  <Hold session={props.session} />}\n                {props.phoneConfig.disabledButtons.includes('numpad') ? null :\n                  <div\n                    id={styles.actionButton}\n                    className={state.dialpadOpen ? styles.on : ''}\n                    onClick={() => this.setState({ dialpadOpen: !state.dialpadOpen })}\n                  >\n                    <img src={dialpadIcon} />\n                  </div>}\n                {props.phoneConfig.disabledButtons.includes('transfer') ? null :\n                  <div\n                    id={styles.actionButton}\n                    className={state.transferMenu ? styles.on : ''}\n                    onClick={() => this.setState({ transferMenu: !state.transferMenu })}\n                  >\n                    <img src={transferIcon} />\n                  </div>}\n                <div\n                  id={styles.transferMenu}\n                  className={state.transferMenu ? '' : styles.closed}\n                >\n                  <input\n                    id={styles.transferInput}\n                    onChange={(e) =>\n                      this.setState({ transferDialString: e.target.value })\n                    }\n                    placeholder=\"Enter the transfer destination...\"\n                  />\n                  {this.state.attendedTransferStarted ? null :\n                    <BlindTranfer\n                      destination={state.transferDialString}\n                      session={props.session}\n                    />}\n                  <AttendedTransfer\n                    started={this.attendedProcess}\n                    destination={state.transferDialString}\n                    session={props.session}\n                  />\n                </div>\n              </div>\n              <audio id={this.props.session.id} autoPlay />\n\n            </React.Fragment>\n        }\n      </React.Fragment>\n    )\n  }\n}\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n  sessions: state.sipSessions.sessions,\n  userAgent: state.sipAccounts.userAgent,\n  deviceId: state.device.primaryAudioOutput\n\n})\nconst actions = {\n  endCall\n}\nexport default connect(mapStateToProps, actions)(Phone)","/* loaded by smart-asset */\nexport default require(\"./call-24px~AGZUevvA.svg\")","import * as React from 'react'\nimport { Invitation } from 'sip.js'\nimport { connect } from 'react-redux'\nimport styles from './Phone.scss'\nimport { acceptCall, declineCall } from '../../actions/sipSessions'\nimport acceptIcon from '../../assets/call-24px.svg'\nimport declineIcon from '../../assets/call_end-24px.svg'\nimport toneManager from '../../util/ToneManager'\n\nconst ring = require('./assets/ring.mp3')\ninterface Props {\n  session: Invitation,\n  acceptCall: Function,\n  declineCall: Function\n}\n\nclass Incoming extends React.Component<Props> {\n\n  componentDidMount() {\n    console.log('this is the session')\n    console.log(this.props.session)\n    toneManager.stopAll()\n    toneManager.playRing('ringtone')\n\n  }\n\n  handleAccept() {\n    toneManager.stopAll()\n    this.props.session.accept()\n    this.props.acceptCall(this.props.session)\n\n  }\n\n  handleDecline() {\n    toneManager.stopAll()\n    this.props.session.reject()\n    this.props.declineCall(this.props.session)\n  }\n\n  render() {\n    const props = this.props\n    return <div id={styles.incoming}>\n      { // @ts-ignore\n        `Incoming: ${props.session.remoteIdentity.uri.normal.user} - ${props.session.remoteIdentity._displayName}`\n      }\n      <div className={styles.endCallButton} onClick={() => this.handleDecline()} ><img src={declineIcon} /></div>\n      <div className={styles.startCallButton} onClick={() => this.handleAccept()} ><img src={acceptIcon} /></div>\n      <audio id='ringtone' loop >\n        <source src={ring} type=\"audio/mpeg\" />\n      </audio>\n      <audio id={this.props.session.id} autoPlay />\n    </div>\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  stateChanged: state.sipSessions.stateChanged,\n})\nconst actions = {\n  acceptCall, declineCall\n}\nexport default connect(mapStateToProps, actions)(Incoming)","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport Phone from './phone/Phone'\nimport Incoming from './phone/Incoming'\nimport { PhoneConfig } from '../models'\n\nconst getSessions = (sessions: any, phoneConfig: PhoneConfig, attendedTransfers: Array<string>) => {\n  const elements = []\n  for (const session in sessions) {\n    if (attendedTransfers.includes(session)) continue\n    elements.push(\n      <Phone session={sessions[session]} key={session} phoneConfig={phoneConfig} />\n    )\n  }\n  return elements\n}\n\nconst getIncomingCallReferrals = (sessions: any) => {\n  const elements = []\n  for (const session in sessions) {\n    elements.push(<Incoming session={sessions[session]} key={session} />)\n  }\n  return elements\n}\n\ninterface Props {\n  sessions: any\n  incomingCalls: any\n  phoneConfig: PhoneConfig\n  attendedTransfers: Array<string>\n}\n\nclass PhoneSessions extends React.Component<Props> {\n  render() {\n    return <React.Fragment>\n      {/* {<Phone \n        // @ts-ignore\n        session={{}} key={0} />} */}\n      {getIncomingCallReferrals(this.props.incomingCalls)}\n      {getSessions(this.props.sessions, this.props.phoneConfig, this.props.attendedTransfers)}\n    </React.Fragment>\n  }\n}\nconst mapStateToProps = (state: any) => ({\n  sessions: state.sipSessions.sessions,\n  incomingCalls: state.sipSessions.incomingCalls,\n  attendedTransfers: state.sipSessions.attendedTransfers\n})\nconst PS = connect(mapStateToProps)(PhoneSessions)\nexport default PS","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport SIPAccount from '../lib/SipAccount'\nimport styles from './Dialstring.scss'\nimport callIcon from '../assets/call-24px.svg'\n\ninterface Props {\n  sipAccount: SIPAccount\n}\n\nclass Dialstring extends React.Component<Props> {\n  state = {\n    currentDialString: ''\n  }\n  handleDial() {\n    if (!this.checkDialstring()) {\n      this.props.sipAccount.makeCall(`${this.state.currentDialString}`)\n    }\n  }\n  checkDialstring() {\n    return this.state.currentDialString.length === 0\n  }\n\n  render() {\n    return (\n      <div className={styles.dialstringContainer}>\n        <input\n          className={styles.dialInput}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              this.handleDial()\n              e.preventDefault()\n            }\n          }}\n          placeholder=\"Enter the number to dial...\"\n          onChange={(e) => this.setState({ currentDialString: e.target.value })}\n        />\n        <button\n          className={styles.dialButton}\n          disabled={this.checkDialstring()}\n          onClick={() => this.handleDial()}\n        >\n          <img src={callIcon} />\n        </button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  sipAccount: state.sipAccounts.sipAccount\n})\n\nconst actions = {\n}\n\nconst D = connect(mapStateToProps, actions)(Dialstring)\nexport default D\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","import { Action } from './models'\nimport {\n  NEW_SESSION,\n  NEW_ATTENDED_TRANSFER,\n  CLOSE_SESSION,\n  SIPSESSION_STATECHANGE,\n  INCOMING_CALL,\n  ACCEPT_CALL,\n  DECLINE_CALL,\n  SIPSESSION_HOLD_REQUEST,\n  SIPSESSION_UNHOLD_REQUEST\n} from '../actions/sipSessions'\nconst sipSessions = (\n  state = {\n    sessions: {},\n    incomingCalls: {},\n    stateChanged: 0,\n    onHold: [],\n    attendedTransfers: []\n  },\n  action: Action\n) => {\n  const { type, payload } = action\n  switch (type) {\n    case INCOMING_CALL:\n      console.log('Incoming call')\n      return {\n        ...state,\n        incomingCalls: { ...state.incomingCalls, [payload.id]: payload }\n      }\n    case NEW_SESSION:\n      console.log('New session added')\n      return {\n        ...state,\n        sessions: { ...state.sessions, [payload.id]: payload }\n      }\n    case NEW_ATTENDED_TRANSFER:\n      return {\n        ...state,\n        sessions: { ...state.sessions, [payload.id]: payload },\n        attendedTransfers: [...state.attendedTransfers, payload.id]\n      }\n    case ACCEPT_CALL:\n      const acceptedIncoming: any = { ...state.incomingCalls }\n      delete acceptedIncoming[payload.id]\n      return {\n        ...state,\n        incomingCalls: acceptedIncoming,\n        sessions: { ...state.sessions, [payload.id]: payload }\n      }\n    case DECLINE_CALL:\n      const declinedIncoming: any = { ...state.incomingCalls }\n      delete declinedIncoming[payload.id]\n      return {\n        ...state,\n        incomingCalls: declinedIncoming\n      }\n    case SIPSESSION_STATECHANGE:\n      return {\n        ...state,\n        stateChanged: state.stateChanged + 1\n      }\n    case CLOSE_SESSION:\n      const newIncoming: any = { ...state.incomingCalls }\n      const newSessions: any = { ...state.sessions }\n      delete newSessions[payload]\n      delete newIncoming[payload]\n      const endHold = [...state.onHold].filter((session) => session !== payload)\n\n      return {\n        ...state,\n        sessions: newSessions,\n        incomingCalls: newIncoming,\n        onHold: endHold\n      }\n    case SIPSESSION_HOLD_REQUEST:\n      return {\n        ...state,\n        onHold: [...state.onHold, payload]\n      }\n    case SIPSESSION_UNHOLD_REQUEST:\n      const newHold = [...state.onHold].filter((session) => session !== payload)\n\n      return {\n        ...state,\n        onHold: newHold\n      }\n    default:\n      return state\n  }\n}\nexport default sipSessions\n","import { combineReducers } from 'redux'\nimport sipSessions from './sipSessions'\nimport sipAccounts from './sipAccounts'\nimport device from './device'\nimport config from './config'\n\nconst reducers: any = combineReducers({ sipAccounts, sipSessions, device, config })\n\nexport default reducers","import { Action } from './models'\nimport { NEW_USERAGENT, NEW_ACCOUNT } from '../actions/sipAccounts'\nconst sipAccounts = (\n  state = {\n    sipAccount: null,\n    userAgent: null,\n    status: ''\n  },\n  action: Action\n) => {\n  const { type, payload } = action\n  switch (type) {\n    case NEW_ACCOUNT:\n      return {\n        ...state,\n        sipAccount: action.payload\n      }\n    case NEW_USERAGENT:\n      return {\n        ...state,\n        userAgent: payload\n      }\n    default:\n      return state\n  }\n}\nexport default sipAccounts\n","import { Action } from './models'\nimport {\n    AUDIO_INPUT_DEVICES_DETECTED,\n    AUDIO_OUTPUT_DEVICES_DETECTED,\n    SET_PRIMARY_INPUT,\n    SET_PRIMARY_OUTPUT\n} from '../actions/device'\nconst device = (\n    state = {\n        audioInput: [],\n        audioOutput: [],\n        primaryAudioOutput: 'default',\n        primaryAudioInput: 'default'\n    },\n    action: Action\n) => {\n    const { type, payload } = action\n    switch (type) {\n        case AUDIO_INPUT_DEVICES_DETECTED:\n            return {\n                ...state,\n                audioInput: payload\n            }\n        case AUDIO_OUTPUT_DEVICES_DETECTED:\n            return {\n                ...state,\n                audioOutput: payload\n            }\n        case SET_PRIMARY_OUTPUT:\n            return {\n                ...state,\n                primaryAudioOutput: payload\n            }\n        case SET_PRIMARY_INPUT:\n            return {\n                ...state,\n                primaryAudioInput: payload\n            }\n        default:\n            return state\n    }\n}\nexport default device\n","import { Action } from './models'\nimport { SET_CREDENTIALS, SET_CONFIG } from '../actions/config'\nconst config = (state = {\n  uri: '',\n  password: '',\n  phoneConfig: {}\n}, action: Action) => {\n  switch (action.type) {\n    case SET_CONFIG:\n      return {\n        ...state, phoneConfig: action.payload\n      }\n    case SET_CREDENTIALS:\n      return {\n        ...state,\n        uri: action.payload.uri,\n        password: action.payload.password,\n      }\n    default:\n      return state\n  }\n}\nexport default config","import { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport reducers from '../reducers/index'\n\nconst middleware = [thunk]\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['device']\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const defaultStore = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\nexport const persistor = persistStore(defaultStore)\n\n\n","import * as React from 'react'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport styles from './styles.scss'\nimport SipWrapper from './SipWrapper'\nimport Status from './components/Status'\nimport PhoneSessions from './components/PhoneSessions'\nimport Dialstring from './components/Dialstring'\nimport { SipConfig, SipCredentials, PhoneConfig } from './models'\n\nimport { defaultStore, persistor } from './store/configureStore'\n\ninterface Props {\n  width: number\n  height: number\n  name: string\n  phoneConfig: PhoneConfig\n  sipCredentials: SipCredentials\n  sipConfig: SipConfig\n  containerStyle: any\n}\n\nexport const phoneStore = defaultStore\n\nexport const ReactSipPhone = ({\n  name,\n  width = 300,\n  height = 600,\n  phoneConfig = { disabledButtons: [] },\n  sipConfig,\n  sipCredentials,\n  containerStyle = {}\n}: Props) => {\n  //If no store is passed into component, default store is used\n  return (\n    <Provider store={phoneStore}>\n      <PersistGate loading={null} persistor={persistor}>\n        <SipWrapper sipConfig={sipConfig} sipCredentials={sipCredentials} phoneConfig={phoneConfig}>\n          <div className={styles.container}\n            style={{\n              ...containerStyle,\n              width: `${width < 300 ? 300 : width}px`,\n              height: `${height < 600 ? 600 : height}px`\n            }}>\n            <Status name={name} />\n            <Dialstring />\n            <PhoneSessions phoneConfig={phoneConfig} />\n            <audio id='tone' autoPlay />\n          </div>\n        </SipWrapper>\n      </PersistGate>\n    </Provider>\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/settings-24px~HQuidduc.83d38c97.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic-24px~xExSpqQP.58e127e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/volume_up-24px~qJQJhpOr.aed75bc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone_paused-24px~TWxpQtZf.84161f8e.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic_off-24px~bjejwOqd.ba53335f.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_forward-24px~UJhdZXVe.66bdaa19.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone_in_talk-24px~DQfZjkDQ.77e3ccda.svg\";","module.exports = __webpack_public_path__ + \"static/media/call_end-24px~HrwYCAOf.39365fed.svg\";","module.exports = __webpack_public_path__ + \"static/media/dialpad-24px~cidqBzRK.348fe506.svg\";","module.exports = __webpack_public_path__ + \"static/media/call-24px~AGZUevvA.f3b7d629.svg\";","module.exports = __webpack_public_path__ + \"static/media/ring.69b29a4c.mp3\";","import React from 'react'\n\nimport { ReactSipPhone, reactSipPhoneReducers } from 'react-sip-phone'\nimport 'react-sip-phone/dist/index.css'\n\nconst urlParams = new URLSearchParams(window.location.search)\nconst sipuri = urlParams.get('sipuri')\nconst password = urlParams.get('password')\nconst websocket = urlParams.get('websocket')\nconst name = urlParams.get('name')\n\nconst App = () => {\n  return (\n    <ReactSipPhone\n      name={name || ''}\n      sipCredentials={{\n        sipuri: sipuri || '',\n        password: password || ''\n      }}\n      sipConfig={{\n        websocket: websocket || '',\n        defaultCountryCode: '1'\n      }}\n      width={0}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}